enclos = if(is.list(envir) || is.pairlist(envir))
parent.frame() else baseenv())
evalq(expr, envir, enclos)
eval.parent(expr, n = 1)
local(expr, envir = new.env())
day <- c(rep("day1",1), rep("day2",1), rep("day3",1), rep("day4",1), rep("day5",1), rep("day6",1))
operator <- c(rep("operatorA",6), rep("operatorB",6), rep("operatorC",6), rep("operator",6), rep("operatorE",6),rep("operatorF",6))
seed <- c("A","C","B","E","F","D", "B","A","E","D","C","F", "C","B","G","A","D","E", "D","F","A","B","E","C", "F","E","D","C","A","B", "E","D","C","F","B","A")
freq <- c(90,114,102,87,93,86, 106,96,90,84,112,91, 108,105,95,100,92,97, 81,83,92,96,80,98, 90,86,85,110,90,100, 88,84,104,91,98,92)
mydata <- data.frame(day, operator, seed, freq)
mydata
matrix(mydata$seed,6,6)
par(mfrow=c(2,2))
plot(freq~ operator+day+seed, mydata)
myfit <-lm(freq~ operator+day+seed, mydata)
anova
anova(myfit)
filter<- c("1","1","1","2","2","2", "1","1","2","2","1","2", "1","1","2","1","2","2", "2","2","1","1","2","1", "2","2","2","1","1","1", "2","2","1","2","1","1")
Groundclutter<-c("1","3","2","2","3","1", "2","1","2","1","3","3", "3","2","3","1","1","2", "1","3","1","2","2","3", "3","2","1","3","1","2", "2","1","3","3","2","1")
myfit <-lm(freq~ operator+day+seed+filter+Groundclutter, mydata)
anova(myfit)
myfit <-lm(freq~ operator+day+seed+filter+Groundclutter, mydata)
myfit <-lm(freq~ operator+day+seed+filter+Groundclutter, mydata)
myfit
ISE202.07.04.ANOVA.TWO.WAY.BLOCKING.LATIN.SQUARE.RADAR.DETECTION.TABLE.5.24 <- read.table("~/Downloads/ISE202-07-04-ANOVA-TWO-WAY-BLOCKING-LATIN-SQUARE-RADAR-DETECTION-TABLE-5.24.csv", header=TRUE, quote="\"")
View(ISE202.07.04.ANOVA.TWO.WAY.BLOCKING.LATIN.SQUARE.RADAR.DETECTION.TABLE.5.24)
as.numeric(filter,Groundclutter)
filter
as.expression.default(filter)
as.numeric_version(filter)
as.list.numeric_version(filter)
as.data.frame.numeric_version(Groundclutter)
Groundclutter
myfit <-lm(freq~ operator+day+seed+as.numeric(filter)+as.numeric(Groundclutter), mydata)
anova(myfit)
plot(anova)
stringasfactors=FALSE
filter
swirl
fileter<-c(1 ,1, 1, 2,2,2,1,1,2,2,1,2,1,1,2,1,2,2,2,2,1,1,2,,1,2,2,2,1,1,1,2,2,1,2 ,1 ,1)
a_data <- read.csv("6_3.csv")
head(a_data)
a_data$A <-as.factor(a_data$A)
a_data$B <-as.factor(a_data$B)
a_data$C <-as.factor(a_data$C)
res = lm(Yield~A+B+C+A*B+A*C+A*B*C, a_data)
anova(res)
plot(res)
plot(res)
plot(res)
par(mfrow=c(2,2))
plot(res)
a_data <- read.csv("6_4.csv")
head(a_data)
a_data$A <-as.factor(a_data$A)
a_data$B <-as.factor(a_data$B)
res = lm(Yield~A+B+A*B, a_data)
anova(res)
plot(res)
interaction.plot(a_data$C,a_data$A,a_data$Yield)
a_data <- read.csv("6_5.csv")
head(a_data)
a_data$A <-as.factor(a_data$A)
a_data$B <-as.factor(a_data$B)
a_data$C <-as.factor(a_data$C)
a_data$D <-as.factor(a_data$D)
res = lm(Yield~A+B+C+D+A*B+A*C+A*D+B*C+B*D+C*D+A*B*C+A*B*D+A*C*D+A*B*C*D, a_data)
anova(res)
par(mfrow=c(2,2))
plot(res)
a_data<-read.csv("6_1.csv")
b_data <- lapply(a_data, as.factor)
b_data$Yield <- a_data$Yield
res = lm(Yield~Blocks+Filter*Ground.Clutter, b_data)
anova(res)
anova(res)
plot(res)
plot(res)
plot(res)
install.packages(c("boot", "ggplot2", "gtable", "Matrix", "mgcv", "munsell", "nlme", "nnet", "scales", "swirl"))
a_data<-read.csv("6_1.csv")
b_data <- lapply(a_data, as.factor)
b_data$Yield <- a_data$Yield
res = lm(Yield~Blocks+Filter*Ground.Clutter, b_data)
anova(res)
`6_1` <- read.csv("~/Downloads/rfilesanddatasets/6_1.csv")
View(`6_1`)
a_data<-read.csv("6_1.csv")
b_data <- lapply(a_data, as.factor)
b_data$Yield <- a_data$Yield
res = lm(Yield~Blocks+Filter*Ground.Clutter, b_data)
anova(res)
a_data <- read.csv("6_2.csv")
a_data$Day <- as.factor(a_data$Day)
a_data$Filter <- as.factor(a_data$Filter)
a_data$Ground.Clutter <- as.factor(a_data$Ground.Clutter)
a_data$Operator <- as.factor(a_data$Operator)
res2 = lm(Yield~Filter+Ground.Clutter+Day+Operator, a_data)
anova(res2)
a_data <- read.csv("6_2.csv")
a_data <- read.csv("6_2.csv")
`6_2` <- read.csv("~/Downloads/rfilesanddatasets/6_2.csv")
View(`6_2`)
a_data <- read.csv('6_2.csv')
a_data <- read.csv("6_2.csv")
a_data$Day <- as.factor(a_data$Day)
a_data$Filter <- as.factor(a_data$Filter)
a_data$Ground.Clutter <- as.factor(a_data$Ground.Clutter)
a_data$Operator <- as.factor(a_data$Operator)
res2 = lm(Yield~Filter+Ground.Clutter+Day+Operator, a_data)
anova(res2)
View(`6_2`)
a_data <- read.csv("6_3.csv")
head(a_data)
a_data$A <-as.factor(a_data$A)
a_data$B <-as.factor(a_data$B)
a_data$C <-as.factor(a_data$C)
res = lm(Yield~A+B+C+A*B+A*C+A*B*C, a_data)
anova(res)
plot(res)
setwd("~/Downloads/242_HW2.1.xlsx")
library(xlsx)
library(Benchmarking)
#DEA analysis//measuring service productivity
#Input data
data <- read.xlsx("242_HW2.1.xlsx", sheetName="1", header=TRUE, rowIndex = NULL,colIndex = NULL)
data$BusD <- as.factor(data$BusD)
attach(data)
#Input=LaborH, FacilityD
#Output=TicketS, FreightS
x=cbind(LaborH, FacilityD)
rownames(x)=City
y=cbind(TicketS, FreightS)
rownames(y)=City
# dea plot
dea.plot(LaborH, FacilityD,txt=rownames(x),xlab="LaborH",ylab="FacilityD")
dea.plot(LaborH, FacilityD,RTS="crs",ORIENTATION="in",add=TRUE,lty="dotted")
dea.plot(LaborH, FacilityD,RTS="crs",ORIENTATION="in-out",add=TRUE,lty="dotted")
dea.plot.transform(TicketS, FreightS,txt=rownames(x),xlab="TicketS",ylab="FreightS") #2 outputs
# dea analysis
e=dea(x,y)
e
# find efficient and inefficient bus depot
eff_value<-e$objval
summary(eff_value)
eff_value=round(eff_value,2)
eff_terminal=which(eff_value==1)
eff_terminal
ineff_terminal=which(eff_value<1)
ineff_terminal
`242_HW2.1` <- read.table("~/Downloads/242_HW2.1.xlsx", header=TRUE, quote="\"")
View(`242_HW2.1`)
swirl()
install.packages("swirl")
library("swirl")
> swirl()
library("swirl")
swirl()
A = 5,6,7
A = <5,6,7>
install.packages(c("cluster", "crayon", "curl", "digest", "httr", "jsonlite", "Matrix", "mgcv", "mime", "nlme", "numDeriv", "openssl", "plyr", "R6", "Rcpp", "stringi", "stringr", "survival", "swirl", "testthat", "ucminf"))
swirl
swirl()
library("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
5+6
5+7
x
x=%+7
x=5+7
x<- 5+7
x
y<- x-3
y
c(1.1, 9, 3.14)
z<-c
z <9 c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
z.55
q
quit
quit()
swirl()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
swirl()
getwd
getwd()
ls()
exit swirl()
0
exit swirl()
exit
swirl_options()
swirl()
linearregression
iinstall_course()
install_course(r)
install.packages("sworl")
install.packages("swirl")
install.packages("swirl")
swirl()
swirl()
install.course("linear regression")
library()
quit
quit()
read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric")
colnames<-("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric")
german.data<-read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric")
geramn.data
german.data
colnames("german.data")
subset <- sample(nrow(german_credit), nrow(german_credit) * 0.8)credit.train = german_credit[subset, ]credit.test = german_credit[-subset, ]
subset <- sample(nrow(german_credit), nrow(german_credit) * 0.8)
subset <- sample(nrow(german.data), nrow(german_credit) * 0.8)
subset <- sample(nrow(german.data), nrow(german.data * 0.8)
german.train=german.data[subset, ]
german.train=german.data[subset, ]
german.train = german.data[subset, ]
german.train=german.data(subset(),)
german.train=german.data(subset(),)
subset <- sample(nrow(german.data), nrow(german.data) * 0.8)
subset.data.frame()
subset
german.train
german.train= german.data(subset,)
german.train= german.data[subset,]
german.train= german.data[-subset,]
ncol(german.train)
german.train
nrow(german.data)
nrow(german.train)
aggregate(german.train)
nrow("german.train")
german.train= german.data[subset,]
german.test= german.data[-subset,]
ncol(german.test)
ncol(german.test)
german.test
german.train
nrow(german.data)
nrow(german.train)
summary(german.data)
summary(german.test)
summary(german.train)
german.glm0<-glm(Y ~ . - id, family = binomial,german.train)
german.glm0<-glm(Y~.-id, family = binomial, german.train)
german.glm0<-glm(Y~., family=binomial,german.train)
german.data$Y = as.factor(german.data$Y)
`8.31` <- read.table("~/Downloads/8.31.xlsx", header=TRUE, quote="\"")
View(`8.31`)
read table<- "8.31"
read.csv(isehw4,header = TRUE)
test <- read.csv("~/Downloads/8.31.csv")
View(test)
inspector <- read.table("test",header=TRUE)
inspector <- read.table("isehw4.csv",header=TRUE)
test
isehw4 <- read.csv("~/Downloads/isehw4.csv")
View(isehw4)
isehw4
tapply(x1,x2,mean)
int<-aov(X3 - X1*X2)
col.names
colnames
int
names(isehw4)
attach(isehw4)
tapply(X3,X2,mean)
int<- aov( X1 - X1*X2)
library("nlme", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
anova(X3 ~ X1*X2)
anova(lm(X1~X2*X3))
anova(lm(X2~X1*X3))
anova(lm(X3~X1*X2))
anova(results)
library(qcc)
install.packages("car")
install.packages(qcc)
install.packages("qcc")
iinstall.packages("SixSigma")
install.packages("SixSigma")
library(qcc)
library(car)
rawdata <- read.csv("updated.csv", header=TRUE, sep=",")
updated <- read.csv("~/Downloads/updated.csv")
View(updated)
updated
insta
install.packages("nortest")
boxplot(data=data, Reading~Part+Operator, notch=TRUE)
boxplot(data=data, Reading~Part+Operator, notch=TRUE)
boxplot(data=data, Reading~Part+Operator)
anova(lm(Reading ~ part * operator, updated))
updated
colnames
anova(lm(Reading ~ part * operator)
anova()
avova(lm(Reading ~ part * operator))
anova(Reading ~ part * operator)
anova(lm(Reading ~ part * operator)
anova(lm(Reading ~ part * operator, data = updated)
anova(lm(Reading ~ part * operator, data = updated)
h
ov = aov(data=data, Reading~Part*Operator)
attach("updated")
library(qcc)
aov = aov(data=updated, Reading~Part*Operator)
summary(aov)
#plot(aov)
a = nlevels(updated$Part) # number of parts
b = nlevels(updated$Operator) # number of operators
n = nrow(updated) / (a * b) # number of trials per operator
MS = summary(aov)[[1]]$"Mean Sq"
MSE = MS[4] # error
MSP = MS[1] # part
MSO = MS[2] # operator
MSPO = MS[3] # part * operator
sigmaSqE = MSE # error
print(sigmaSqE)
sigmaSqP = (MSP - MSPO) / (b * n) # part
print(sigmaSqP)
sigmaSqO = (MSO - MSPO) / (a * n) # operator
print(sigmaSqO)
sigmaSqPO = (MSP - MSE) / n # part * operator
print(sigmaSqPO)
a
b
a = nlevels(updated$Part)
a
a = nlevels("updated$Part")
a
print(sigmaSqPO)
residual(aov)
residuals = residuals(aov)
hist(residuals, xlab="Residuals", ylab="Frequency", main="Residuals - Distribution")
ad.test(residuals)
a = nlevels(data$Part) # number of parts
b = nlevels(data$Operator) # number of operators
n = nrow(data) / (a * b) # number of trials per operator
MS = summary(aov)[[1]]$"Mean Sq"
MSE = MS[3] # error
MSP = MS[1] # part
MSO = MS[2] # operator
MSPO = 0 # part * operator
sigmaSqE = MSE # error
print(sigmaSqE)
sigmaSqP = (MSP - MSPO) / (b * n) # part
print(sigmaSqP)
sigmaSqO = (MSO - MSPO) / (a * n) # operator
print(sigmaSqO)
sigmaSqPO = 0 # part * operator
print(sigmaSqPO)
print(sigmaSqPO)
sigmaSqP = (MSP - MSPO) / (b * n)
sigmaSqP
bartlett.test(data=updated, Reading~interaction(Part, Operator))
aov = aov(data=updated, Reading~Part*Operator)
summary(aov)
aov = anova(data=updated, Reading~Part*Operator)
OsigmaSqE = MSE # error
print(sigmaSqE)
OsigmaSqE = MSE # error
print(sigmaSqE)
sigmaSqP = (MSP - MSPO) / (b * n) # part
print(sigmaSqP)
sigmaSqO = (MSO - MSPO) / (a * n) # operator
print(sigmaSqO)
sigmaSqPO = (MSP - MSE) / n # part * operator
res
aov = aov(data=updated, Reading~Part+Operator)
summary(aov)
a = nlevels(data$Part) # number of parts
b = nlevels(data$Operator) # number of operators
n = nrow(data) / (a * b) # number of trials per operator
MS = summary(aov)[[1]]$"Mean Sq"
MSE = MS[3] # error
MSP = MS[1] # part
MSO = MS[2] # operator
MSPO = 0 # part * operator
a = nlevels(updated$Part) # number of parts
b = nlevels(updated$Operator) # number of operators
n = nrow(data) / (a * b) # number of trials per operator
MS = summary(aov)[[1]]$"Mean Sq"
MSE = MS[3] # error
MSP = MS[1] # part
MSO = MS[2] # operator
MSPO = 0 # part * operator
sigmaSqE = MSE # error
print(sigmaSqE)
sigmaSqP = (MSP - MSPO) / (b * n) # part
print(sigmaSqP)
sigmaSqO = (MSO - MSPO) / (a * n) # operator
print(sigmaSqO)
sigmaSqPO = 0 # part * operator
print(sigmaSqPO)
print(sigmaSqP)
res
MS
MSE
MSP
MSPO
(MSO - MSPO) / (a * n)
a
a = nlevels(updated$Part)
a
a = nlevels(updated$Part)
a
n
n=nrow(updated)
n
n
rawdata <- read.csv("updated.csv", header=TRUE, sep=",")
rawdata$Part <- factor(rawdata$Part)
rawdata$Operator <- factor(rawdata$Operator)
data <- rawdata #
n
a
as=nlevels(updated$Part)
as
as
n
ss.rr(var="Reading", part="Part", appr="Operator", data=updated)
updated <- read.csv("~/Downloads/updated.csv")
View(updated)
updated
newdata <- read.csv("updated.csv", header=TRUE, sep=",")
data.train <- read.table("updated.csv",sep=",",header=T)
setwd
load("~/Downloads/updated.csv")
load("~/Downloads/updated.csv")
install.packages("AcceptanceSampling")
library(AcceptanceSampling)
N = 1000 # lot size
p1 = 0.01 # acceptable quality number (AQL)
p2 = 0.10 # lot tolerance percent defective (LTPD) > p1
alpha = 0.05 # significance (false positive ratio)
beta = 0.1
N
samplingPlan <- find.plan(PRP=c(p1, (1-alpha)), CRP=c(p2, beta), type="binom")
n <- samplingPlan$n
n
print(n)
c <- samplingPlan$c
p2=0.05
p2
n
samplingPlan <- find.plan(PRP=c(p1, (1-alpha)), CRP=c(p2, beta), type="binom")
n <- samplingPlan$n
n
c <- samplingPlan$c
c
r <- samplingPlan$r
r
oc <- OC2c(n=n, c=c, type="b")
plot(oc, xlim=c(0.0, 0.1))
d <- 1 # number of defectives in sample
p <- d / n # lot fraction defective
Pa <- 0
p
for (d in 0:c) {
Pd <- choose(n, d) * (p ^ d) * ((1-p) ^ (n-d))
Pa <- Pa + Pd
}
pa
Pa
Pd
print(Pa)
AOQ <- Pa * p * (N - n) / N
AOQ
ATI <- n + ((1 - Pa) * (N - n))
ATI
plot(p,ATI)
x<-5
y<-6
plot(x,y)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install_course("Advanced R Programming")
swirl()
Sys.Date()
x<-c(2,4,5)
mean(c(2,4,5))
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/Desktop/Files/ise235/ise235project/235projfinal.R')
2003 0.512 0.502
source('~/Desktop/Files/ise235/ise235project/235projfinal.R')
source('~/Desktop/Files/ise235/ise235project/235projfinal.R')
source('~/Desktop/Files/ise235/ise235project/235projfinal.R')
source('~/Desktop/Files/ise235/ise235project/235projfinalV2.R')
